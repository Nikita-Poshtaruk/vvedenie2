#include <iostream>
#include <string>
 
struct Student
{
    std::string name, telephone;
};
 
class Students
{
public:
    explicit Students(const size_t size) :
        m_data(new Student[size]),
        m_size(size),
        m_curRecords(0)
    {}
    Students(const Students &st) :
        Students(st.m_size)
    {
        m_curRecords = st.m_curRecords;
        for (size_t i = 0; i < m_curRecords; i++)
            m_data[i] = st.m_data[i];
    }
    Students& operator= (const Students &st)
    {
        if (this != &st)
        {
            m_size = st.m_size;
            m_curRecords = st.m_curRecords;
            delete[] m_data;
            m_data = new Student[m_size];
            for (size_t i = 0; i < m_curRecords; i++)
                m_data[i] = st.m_data[i];
        }
        return *this;
    }
    ~Students()
    {
        delete[] m_data;
    }
    bool AddStudent(const Student &st)
    {
        if (m_curRecords == m_size)
            return false;
        m_data[m_curRecords++] = st;
        return true;
    }
    void PrintAll() const
    {
        for (size_t i = 0; i < m_curRecords; i++)
            std::cout << m_data[i].name << " " << m_data[i].telephone << std::endl;
    }
 
private:
    Student *m_data;
    size_t m_size;
    size_t m_curRecords;
};
 
int main()
{
    Students st(42);
    st.AddStudent({ "ABCD", "100" });
    Students st2 = st;
    st2.AddStudent({ "IDDQD", "777" });
    Students st3(st2);
    st3.AddStudent({ "Eniki", "123" });
    st3.PrintAll();
}
